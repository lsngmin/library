<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="BookDAO">
    <insert id="insertBook">
        INSERT INTO Book (
        bookCode,
        bookStatus,
        bookPage,
        bookImageSrc,
        bookName,
        bookPublisher,
        bookPublishDate,
        bookAuthor,
        bookQuantity,
        bookPrice,
        bookCategory,
        bookLocation,
        bookDecription
        ) VALUES (
        #{bookCode},
        #{bookStatus},
        #{bookPage},
        #{bookImageSrc},
        #{bookName},
        #{bookPublisher},
        #{bookPublishDate},
        #{bookAuthor},
        #{bookQuantity},
        #{bookPrice},
        #{bookCategory},
        #{bookLocation},
        #{bookDecription}
        );
    </insert>

    <select id="getBookList" resultType="Book">
        SELECT
        bookCode,
        bookStatus,
        bookPage,
        bookImageSrc,
        bookName,
        bookPublisher,
        bookPublishDate,
        bookAuthor,
        bookQuantity,
        bookPrice,
        bookCategory,
        bookLocation,
        bookDecription,
        borrowCount <!-- borrowCount 추가 -->
        FROM Book
        ORDER BY borrowCount DESC; <!-- 대출 횟수 기준 정렬 -->
    </select>


    <update id="createBookTable">
        CREATE TABLE IF NOT EXISTS Book (
        bookCode VARCHAR(50) PRIMARY KEY,
        bookStatus VARCHAR(20),
        bookPage VARCHAR(20),
        bookImageSrc VARCHAR(200),
        bookName VARCHAR(100) NOT NULL,
        bookPublisher VARCHAR(100),
        bookPublishDate VARCHAR(20),
        bookAuthor VARCHAR(100),
        bookQuantity VARCHAR(20),
        bookPrice VARCHAR(50),
        bookCategory VARCHAR(50),
        bookLocation VARCHAR(100),
        bookDecription TEXT
        )
    </update>

    <select id="selectBook" parameterType="Book" resultType="Book">
        SELECT
        bookCode,
        bookName,
        bookStatus,
        bookPage,
        bookImageSrc,
        bookPublisher,
        bookPublishDate,
        bookAuthor,
        bookPrice,
        bookCategory,
        bookLocation,
        bookDecription,
        bookQuantity
        FROM Book
        WHERE bookCode = #{bookCode}
    </select>

    <update id="updateBook" parameterType="Book">
        UPDATE Book
        SET
        bookName = #{bookName},
        bookStatus = #{bookStatus},
        bookPage = #{bookPage},
        bookImageSrc = #{bookImageSrc},
        bookPublisher = #{bookPublisher},
        bookPublishDate = #{bookPublishDate},
        bookAuthor = #{bookAuthor},
        bookPrice = #{bookPrice},
        bookCategory = #{bookCategory},
        bookLocation = #{bookLocation},
        bookDecription = #{bookDecription},
        bookQuantity = #{bookQuantity}
        WHERE bookCode = #{bookCode}
    </update>

    <select id="selectBookDetail" parameterType="Book" resultType="Book">
        SELECT
        bookCode,
        bookName,
        bookStatus,
        bookPage,
        bookImageSrc,
        bookPublisher,
        bookPublishDate,
        bookAuthor,
        bookPrice,
        bookCategory,
        bookLocation,
        bookDecription,
        bookQuantity
        FROM Book
        WHERE bookCode = #{bookCode}
    </select>

    <select id="selectBookTotal" resultType="int">
        SELECT COUNT(bookCode) AS totalBooks
        FROM Book;
    </select>

    <select id="selectSearchBook" resultType="Book">
        select bookCode, bookName, bookPublisher, bookAuthor, bookPublishDate from Book where bookCode = #{bookCode};
    </select>
    <select id="selectBookCodeByBookName" resultType="String">
        select bookCode from Book where bookName=#{bookName};
    </select>

    <update id="incrementBorrowCount" parameterType="String">
        UPDATE Book
        SET borrowCount = borrowCount + 1
        WHERE bookCode = #{bookCode}
    </update>

    <select id="getBooksByCategory" parameterType="String" resultType="Book">
        SELECT
        bookCode, bookStatus, bookPage, bookImageSrc, bookName,
        bookPublisher, bookPublishDate, bookAuthor, bookQuantity,
        bookPrice, bookCategory, bookLocation, bookDecription, borrowCount
        FROM Book
        WHERE bookCategory = #{category}
        ORDER BY borrowCount DESC;
    </select>

    <select id="searchBooksByKeywordAndType" parameterType="map" resultType="Book">
        SELECT
        bookCode, bookName, bookAuthor, bookPublisher, bookCategory, bookLocation, bookQuantity, bookImageSrc
        FROM Book
        WHERE
        <choose>
            <when test="searchType == 'title'">
                REPLACE(bookName, ' ', '') LIKE REPLACE(#{keyword}, ' ', '') <!-- 띄어쓰기 제거 -->
            </when>
            <when test="searchType == 'author'">
                REPLACE(bookAuthor, ' ', '') LIKE REPLACE(#{keyword}, ' ', '') <!-- 띄어쓰기 제거 -->
            </when>
            <when test="searchType == 'publisher'">
                REPLACE(bookPublisher, ' ', '') LIKE REPLACE(#{keyword}, ' ', '') <!-- 띄어쓰기 제거 -->
            </when>
            <otherwise>
                REPLACE(bookName, ' ', '') LIKE REPLACE(#{keyword}, ' ', '') <!-- 기본: 제목 검색 -->
            </otherwise>
        </choose>
    </select>


</mapper>